## 1.命名空间

解决重名问题。在一个新的名字空间中可定义任何标识符，它们不会与任何已有的标识符发生冲突，因为已有的定义都处于其他名字空间中。

TypeScript 中命名空间使用 namespace 来定义，语法格式如下：

```ts
namespace SomeNameSpaceName {
   export interface ISomeInterfaceName {      }  
   export class SomeClassName {      }  
}
```

如果我们需要在外部可以调用 SomeNameSpaceName 中的类类和接口，则**需要在类和接口**添加 export 关键字.

其实一个`命名空间`本质上一个`对象`

```ts
namespace Letter {
  export let a = 1;
  export let b = 2;
  export let c = 3;
  // ...
  export let z = 26;
}
//编译成js
var Letter;
(function (Letter) {
    Letter.a = 1;
    Letter.b = 2;
    Letter.c = 3;
    // ...
    Letter.z = 26;
})(Letter || (Letter = {}));
```

命名空间在现代TS开发中的重要性并不高,主要原因是ES6引入了模块系统(export 和import 就能表示这个文件是一个单独的模块，不同文件里面变量名字重复不打紧，除非你文件里面没有export和Import这样全在全局变量中),文件即模块的方式使得开发者能更好的得组织代码,

,但是命名空间并非一无是处,通常在一些**非 TypeScript 原生代码的 `.d.ts` 文件**中使用

总之在typescript的开发中不建议使用命名空间，现在他的舞台在`d.ts`中，下面一节我们就要探讨一下如何给一个旧JavaScript代码编写`d.ts`文件。

## 2.声明文件

市面上大部分库还是以 JavaScript 编写的，这个时候由于库没有像 TS 一样定义类型，因此需要一个声明文件来帮助库的使用者来获取库的类型提示，比如 JQuery 虽然是 js 编写的但是如果引入 `@types/jquery` 就可以获得以下效果:

![image-20211228170240647](https://s2.loli.net/2021/12/28/ESlwHijWqanU1YV.png)

### 1.@types/jquery

引入@types/jquery就是引入这个库的d.ts文件

### 2.其他人帮助写的d.ts

其实库的d.ts即@types/jquery不是他自己开发的 而是别人统一放在这个仓库里

Github 上有一个库 [DefinitelyTyped](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FDefinitelyTyped%2FDefinitelyTyped) 它定义了市面上主流的JavaScript 库的 d.ts ,而且我们可以很方便地用 npm 引入这些 d.ts。比如我们要安装 JQuery 的 d.ts，**所以我们去这个仓库找或者npmjs上@types/jquery有没有这个定**义文件.



```ts
npm install @types/jquery -save
```

jquery的index.ts

```ts
declare namespace Chai {

    interface Assertion {
        attr(name: string, value?: string): Assertion;
        prop(name: string, value?: any): Assertion;
        css(name: string, value?: string): Assertion;
        data(name: string, value?: string): Assertion;
        class(className: string): Assertion;
        id(id: string): Assertion;
        html(html: string): Assertion;
        text(text: string): Assertion;
        value(text: string): Assertion;
        descendants(selector: string): Assertion;
        visible(): Assertion;
        hidden(): Assertion;
        selected(): Assertion;
        checked(): Assertion;
        disabled(): Assertion;
        enabled(): Assertion;
        (selector: string): Assertion;
    }

    interface Match {
        (selector: string): Assertion;
    }
}

interface ChaiJQueryStatic {

    ajax(settings: JQueryAjaxSettings): JQueryXHR;
    
    ajax(url: string, settings?: JQueryAjaxSettings): JQueryXHR;

    ajaxPrefilter(dataTypes: string, handler: (opts: any, originalOpts: JQueryAjaxSettings, jqXHR: JQueryXHR) => any): void;
   
    ajaxPrefilter(handler: (opts: any, originalOpts: JQueryAjaxSettings, jqXHR: JQueryXHR) => any): void;

    ajaxSettings: JQueryAjaxSettings;

  
    ajaxSetup(options: JQueryAjaxSettings): void;

  
    get(url: string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;
   
    get(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;
  
    getJSON(url: string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any): JQueryXHR;
   
    getJSON(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any): JQueryXHR;
    
    getScript(url: string, success?: (script: string, textStatus: string, jqXHR: JQueryXHR) => any): JQueryXHR;

    param: JQueryParam;


    post(url: string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;

    post(url: string, data?: Object|string, success?: (data: any, textStatus: string, jqXHR: JQueryXHR) => any, dataType?: string): JQueryXHR;
    Callbacks(flags?: string): JQueryCallback;

```

其实就是先declare 一个命名空间jquery  然后定义所有的类型或者接口的集合到这一个文件

### 3.这个仓库没帮我们定义

有时候这个库没帮我们定义 或者我们自己写的js库 这个时候需要使用这些库我们就需要自己编写d.ts文件啦

## 3.怎么编写的d.ts

键字 `declare` 表示声明的意思,我们可以用它来做出各种声明:

- `declare var` 声明全局变量
- `declare function` 声明全局方法
- `declare class` 声明全局类
- `declare enum` 声明全局枚举类型
- `declare namespace` 声明（含有子属性的）全局对象
- `interface` 和 `type` 声明全局类型

### 1.声明变量

通常情况下全局变量是不允许改动的,大多数情况下还是以 `const` 为主:

```ts
declare const jQuery: (selector: string) => any;
```

### 2.声明函数

```ts
declare function jQuery(selector: string): any;
```

### 3.声明类/枚举/命名空间

```ts
declare class Person {
    name: string;
    constructor(name: string);
    say(): string;
}

declare enum Directions {
    Up,
    Down,
    Left,
    Right
}

//命名空间虽然在日常开发中已经不常见了，但是在 d.ts 文件编写时还是很常见的，它用来表示全局变量是一个对象，包含很多子属性。
//比如 jQuery 是全局对象，而其包含一个 jQuery.ajax 用于处理 ajax 请求，这个时候命名空间就派上用场了:
declare namespace jQuery {
    function ajax(url: string, settings?: any): void;
}
```

### 4.声明interface 和 type

除了全局变量之外，可能有一些类型我们也希望能暴露出来。我们可以直接使用 interface 或 type 来声明一个全局的接口或类型 

```ts
interface AjaxSettings {
    method?: 'GET' | 'POST'
    data?: any;
}
declare namespace jQuery {
    function ajax(url: string, settings?: AjaxSettings): void;
}
```

### 5.声明合并

假如 jQuery **既是一个函数**，可以直接被调用 `jQuery('#foo')`，**又是一个对象**，拥有子属性 `jQuery.ajax()`（事实确实如此），那么我们可以组合多个声明语句，它们会不冲突的合并起来:

```ts
// src/jQuery.d.ts
declare function jQuery(selector: string): any;
declare namespace jQuery {
    function ajax(url: string, settings?: any): void;
}
    
    
// src/index.ts

jQuery('#foo');
jQuery.ajax('/api/get_something');
```

### 6.declare声明一个模块

```ts

declare module '*.png';
declare module '*.css';
declare module '*.less';

```

在编辑ts文件的时候，如果你想导入一个.css/.less/.png格式的文件，**如果没有经过declare的话是会提示语法错误的**,这个文件也就相当于外部的一个js库，如果这个库没有d.ts别人也会报错无法识别类型 所以引入外部的文件比如js通常加一个d.ts然后declare namespace name{}就可以啦当作啦一个模块就不会报错不用具体函数的声明 如果要使用到具体函数的时候比如jquery.ajax才需要具体declare ajax这个函数，其他png,css文件类似这个道理

### 7.自动生成声明文件

如果库的源码本身就是由 ts 写的，那么在使用 `tsc` 脚本将 ts 编译为 js 的时候，添加 `declaration` 选项，就可以同时也生成 `.d.ts` 声明文件了.

我们可以在命令行中添加 `--declaration`（简写 `-d`），或者在 `tsconfig.json` 中添加 `declaration` 选项.

```ts
{
    "compilerOptions": {
        "module": "commonjs",
        "outDir": "lib",
        "declaration": true,
    }
}
```

## 4.发布声明文件

- 将文件向开源库提 PR,声明文件与源码放在一起,作为第一方声明
- 发布到 DefinitelyTyped,作为第三方声明文件

#### 第一方声明

如果是手动写的声明文件，那么需要满足以下条件之一，才能被正确的识别：

1.第一种方式是给 `package.json` 中的 `types` 或 `typings` 字段指定一个类型声明文件地址。比如：

```
{
    "name": "foo",
    "version": "1.0.0",
    "main": "lib/index.js",
    "types": "foo.d.ts",
}
```

2.如果没有指定 `types` 或 `typings`，那么就会在根目录下寻找 `index.d.ts` 文件，将它视为此库的类型声明文件。

3.如果没有找到 `index.d.ts` 文件，那么就会寻找入口文件（`package.json` 中的 `main` 字段指定的入口文件）是否存在对应同名不同后缀的 `.d.ts` 文件。

比如 `package.json` 是这样时：

```TS
{
    "name": "foo",
    "version": "1.0.0",
    "main": "lib/App.js",
    "types": "foo.d.ts",
}
```

就会先识别 `package.json` 中是否存在 `types` 或 `typings` 字段。发现不存在，那么就会寻找是否存在 `index.d.ts` 文件。如果还是不存在，那么就会寻找是否存在 `lib/index.d.ts` 文件。假如说连 `lib/App.d.ts` 都不存在的话，就会被认为是一个没有提供类型声明文件的库了。

有的库为了支持导入**子模块**(一个模块一个d.ts文件)，比如 `import bar from 'foo/lib/bar'`，就需要额外再编写一个类型声明文件 `lib/bar.d.ts` 或者 `lib/bar/index.d.ts`，这与自动生成声明文件类似，**一个库中同时包含了多个类型声明文件。**

类似图下一个文件夹一个d.ts文件

![image-20211228112707786](https://s2.loli.net/2021/12/28/r6yQbqhRLB5KJxE.png)

#### 第三方:声明文件发布到DefinitelyTyped

如果我们是在给别人的仓库添加类型声明文件，但原作者不愿意合并 pull request，那么就需要将声明文件发布到 `@types` 下。

与普通的 npm 模块不同，`@types` 是统一由 [DefinitelyTyped](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FDefinitelyTyped%2FDefinitelyTyped%2F) 管理的。要将声明文件发布到 `@types` 下，就需要给 [DefinitelyTyped](https://link.juejin.cn/?target=https%3A%2F%2Fgithub.com%2FDefinitelyTyped%2FDefinitelyTyped%2F) 创建一个 pull-request，其中包含了类型声明文件，测试代码，以及 `tsconfig.json` 等。

## 5.d.ts还有什么用

d.ts文件是ts用来声明变量，模块，type，interface等等的，那在这种后缀的ts文件声明这些东西和**在纯ts文件声明**这些东西又什么**区别**呢？

在.d.ts声明变量或者模块等东西之后，在其他地方可以**不用import导**入这些东西就可以直接用，用，而且有语法提示

但是也不是说创建了.d.ts文件，里面声明的东西就能生效了毕竟归根到底也是.ts文件，需要预编译，所以需要在tsconfig.json文件里面的**include数组里面添加这个文件**，include数组里面可以不用写.d.ts文件的绝对路径，可以通过glob通配符，匹配这个文件所在的文件夹或者是“祖宗级别”文件夹

## 6.declare和不用declare有什么区别 都不会报语法错误

通过declare声明的类型或者变量或者模块，在include包含的文件范围内，都可以**直接引用而不用去import**或者import type相应的变量或者类型。

所以如果你的jquery库的index.d.ts

```ts
interface setting{
	name:string
}
```

这样的话你就只能在Index.d.ts里面使用 你的项目引入jquery是无法识别到这个interface的因为你没有export，所以你要不就export 要不就declare

```ts
declare interface setting{
	name:string
}
```

这样你只要引入的jquery的@types你的项目就能不用导入就能识别setting这个接口 因为declare就是告诉编译器这些变量已经存在，不需要Import

**declare就是告诉TS编译器你担保这些变量和模块存在，并声明了相应类型，编译的时候不需要提示错误！**

## 7.注意



1.d.ts文件顶级声明declare最好不要跟export同级使用，不然在其他ts引用这个.d.ts的内容的时候，就需要手动import导入了



2.在.d.ts文件里如果顶级声明不用export的话，declare和直接写type、interface效果是一样的，在其他地方都可以直接引用

**总结：即有export的话同级declare会失效，只是exort会导出需要import 如果只有declare的话就可以不用import 直接用declare的全局申明**

## 8.实战

events包的实战![image-20211228170121647](https://s2.loli.net/2021/12/28/fTiMBhOdC2sSy8P.png)

```ts
//!为什么不用declare 因为不需要别的库用这个type只是这个d.ts用
//提取公共的类型
type Type = string | symbol
type Listener = (...args:any[])=>void

//!为什么不用declare 因为别人用这个库需要import var EventEmitter = require('events')、
export class EventEmitter {
  //静态方法
  static defaultMaxListeners:number;
  static ListenerCount(emitter:EventEmitter,eventname:string|number):number;
  //实例方法
  eventNames():Array<Type>;
  setMaxListeners(n:number):this;
  emit(type:Type,...args:any[]):boolean;
  off(type:Type,listener:Listener):this
  getMaxListeners(): number;
  emit(type: Type, ...args: any[]): boolean;
  addListener(type: Type, listener: Listener): this;
  on(type: Type, listener: Listener): this;
  once(type: Type, listener: Listener): this;
  prependOnceListener(type: Type, listener: Listener): this;
  removeListener(type: Type, listener: Listener): this;
  removeAllListeners(type?: Type): this;
  listeners(type: Type): Listener[];
  listenerCount(type: Type): number;
  prependListener(type: Type, listener: Listener): this;
  rawListeners(type: Type): Listener[];
}
```

![image-20211228170205823](https://s2.loli.net/2021/12/28/NdjGiV5hMB31yXb.png)